/*
 * This file is generated by jOOQ.
 */
package com.example.entjavamp1.model.tables.records;


import com.example.entjavamp1.model.enums.OrdersOrder;
import com.example.entjavamp1.model.tables.Orders;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record6;
import org.jooq.Row6;
import org.jooq.impl.UpdatableRecordImpl;
import org.jooq.types.UInteger;
import org.jooq.types.ULong;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class OrdersRecord extends UpdatableRecordImpl<OrdersRecord> implements Record6<ULong, String, OrdersOrder, UInteger, Boolean, Double> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>pos_db.orders.id</code>.
     */
    public void setId(ULong value) {
        set(0, value);
    }

    /**
     * Getter for <code>pos_db.orders.id</code>.
     */
    public ULong getId() {
        return (ULong) get(0);
    }

    /**
     * Setter for <code>pos_db.orders.name</code>.
     */
    public void setName(String value) {
        set(1, value);
    }

    /**
     * Getter for <code>pos_db.orders.name</code>.
     */
    public String getName() {
        return (String) get(1);
    }

    /**
     * Setter for <code>pos_db.orders.order</code>.
     */
    public void setOrder(OrdersOrder value) {
        set(2, value);
    }

    /**
     * Getter for <code>pos_db.orders.order</code>.
     */
    public OrdersOrder getOrder() {
        return (OrdersOrder) get(2);
    }

    /**
     * Setter for <code>pos_db.orders.quantity</code>.
     */
    public void setQuantity(UInteger value) {
        set(3, value);
    }

    /**
     * Getter for <code>pos_db.orders.quantity</code>.
     */
    public UInteger getQuantity() {
        return (UInteger) get(3);
    }

    /**
     * Setter for <code>pos_db.orders.isPending</code>.
     */
    public void setIspending(Boolean value) {
        set(4, value);
    }

    /**
     * Getter for <code>pos_db.orders.isPending</code>.
     */
    public Boolean getIspending() {
        return (Boolean) get(4);
    }

    /**
     * Setter for <code>pos_db.orders.price</code>.
     */
    public void setPrice(Double value) {
        set(5, value);
    }

    /**
     * Getter for <code>pos_db.orders.price</code>.
     */
    public Double getPrice() {
        return (Double) get(5);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<ULong> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record6 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row6<ULong, String, OrdersOrder, UInteger, Boolean, Double> fieldsRow() {
        return (Row6) super.fieldsRow();
    }

    @Override
    public Row6<ULong, String, OrdersOrder, UInteger, Boolean, Double> valuesRow() {
        return (Row6) super.valuesRow();
    }

    @Override
    public Field<ULong> field1() {
        return Orders.ORDERS.ID;
    }

    @Override
    public Field<String> field2() {
        return Orders.ORDERS.NAME;
    }

    @Override
    public Field<OrdersOrder> field3() {
        return Orders.ORDERS.ORDER;
    }

    @Override
    public Field<UInteger> field4() {
        return Orders.ORDERS.QUANTITY;
    }

    @Override
    public Field<Boolean> field5() {
        return Orders.ORDERS.ISPENDING;
    }

    @Override
    public Field<Double> field6() {
        return Orders.ORDERS.PRICE;
    }

    @Override
    public ULong component1() {
        return getId();
    }

    @Override
    public String component2() {
        return getName();
    }

    @Override
    public OrdersOrder component3() {
        return getOrder();
    }

    @Override
    public UInteger component4() {
        return getQuantity();
    }

    @Override
    public Boolean component5() {
        return getIspending();
    }

    @Override
    public Double component6() {
        return getPrice();
    }

    @Override
    public ULong value1() {
        return getId();
    }

    @Override
    public String value2() {
        return getName();
    }

    @Override
    public OrdersOrder value3() {
        return getOrder();
    }

    @Override
    public UInteger value4() {
        return getQuantity();
    }

    @Override
    public Boolean value5() {
        return getIspending();
    }

    @Override
    public Double value6() {
        return getPrice();
    }

    @Override
    public OrdersRecord value1(ULong value) {
        setId(value);
        return this;
    }

    @Override
    public OrdersRecord value2(String value) {
        setName(value);
        return this;
    }

    @Override
    public OrdersRecord value3(OrdersOrder value) {
        setOrder(value);
        return this;
    }

    @Override
    public OrdersRecord value4(UInteger value) {
        setQuantity(value);
        return this;
    }

    @Override
    public OrdersRecord value5(Boolean value) {
        setIspending(value);
        return this;
    }

    @Override
    public OrdersRecord value6(Double value) {
        setPrice(value);
        return this;
    }

    @Override
    public OrdersRecord values(ULong value1, String value2, OrdersOrder value3, UInteger value4, Boolean value5, Double value6) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached OrdersRecord
     */
    public OrdersRecord() {
        super(Orders.ORDERS);
    }

    /**
     * Create a detached, initialised OrdersRecord
     */
    public OrdersRecord(ULong id, String name, OrdersOrder order, UInteger quantity, Boolean ispending, Double price) {
        super(Orders.ORDERS);

        setId(id);
        setName(name);
        setOrder(order);
        setQuantity(quantity);
        setIspending(ispending);
        setPrice(price);
        resetChangedOnNotNull();
    }
}
