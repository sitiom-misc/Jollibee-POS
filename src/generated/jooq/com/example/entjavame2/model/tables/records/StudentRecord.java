/*
 * This file is generated by jOOQ.
 */
package com.example.entjavame2.model.tables.records;


import com.example.entjavame2.model.tables.Student;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record7;
import org.jooq.Row7;
import org.jooq.impl.UpdatableRecordImpl;
import org.jooq.types.ULong;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class StudentRecord extends UpdatableRecordImpl<StudentRecord> implements Record7<ULong, String, String, Integer, Integer, Double, Boolean> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>iacademy.student.id</code>.
     */
    public void setId(ULong value) {
        set(0, value);
    }

    /**
     * Getter for <code>iacademy.student.id</code>.
     */
    public ULong getId() {
        return (ULong) get(0);
    }

    /**
     * Setter for <code>iacademy.student.name</code>.
     */
    public void setName(String value) {
        set(1, value);
    }

    /**
     * Getter for <code>iacademy.student.name</code>.
     */
    public String getName() {
        return (String) get(1);
    }

    /**
     * Setter for <code>iacademy.student.section</code>.
     */
    public void setSection(String value) {
        set(2, value);
    }

    /**
     * Getter for <code>iacademy.student.section</code>.
     */
    public String getSection() {
        return (String) get(2);
    }

    /**
     * Setter for <code>iacademy.student.exam1</code>.
     */
    public void setExam1(Integer value) {
        set(3, value);
    }

    /**
     * Getter for <code>iacademy.student.exam1</code>.
     */
    public Integer getExam1() {
        return (Integer) get(3);
    }

    /**
     * Setter for <code>iacademy.student.exam2</code>.
     */
    public void setExam2(Integer value) {
        set(4, value);
    }

    /**
     * Getter for <code>iacademy.student.exam2</code>.
     */
    public Integer getExam2() {
        return (Integer) get(4);
    }

    /**
     * Setter for <code>iacademy.student.average</code>.
     */
    public void setAverage(Double value) {
        set(5, value);
    }

    /**
     * Getter for <code>iacademy.student.average</code>.
     */
    public Double getAverage() {
        return (Double) get(5);
    }

    /**
     * Setter for <code>iacademy.student.isDeleted</code>.
     */
    public void setIsdeleted(Boolean value) {
        set(6, value);
    }

    /**
     * Getter for <code>iacademy.student.isDeleted</code>.
     */
    public Boolean getIsdeleted() {
        return (Boolean) get(6);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<ULong> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record7 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row7<ULong, String, String, Integer, Integer, Double, Boolean> fieldsRow() {
        return (Row7) super.fieldsRow();
    }

    @Override
    public Row7<ULong, String, String, Integer, Integer, Double, Boolean> valuesRow() {
        return (Row7) super.valuesRow();
    }

    @Override
    public Field<ULong> field1() {
        return Student.STUDENT.ID;
    }

    @Override
    public Field<String> field2() {
        return Student.STUDENT.NAME;
    }

    @Override
    public Field<String> field3() {
        return Student.STUDENT.SECTION;
    }

    @Override
    public Field<Integer> field4() {
        return Student.STUDENT.EXAM1;
    }

    @Override
    public Field<Integer> field5() {
        return Student.STUDENT.EXAM2;
    }

    @Override
    public Field<Double> field6() {
        return Student.STUDENT.AVERAGE;
    }

    @Override
    public Field<Boolean> field7() {
        return Student.STUDENT.ISDELETED;
    }

    @Override
    public ULong component1() {
        return getId();
    }

    @Override
    public String component2() {
        return getName();
    }

    @Override
    public String component3() {
        return getSection();
    }

    @Override
    public Integer component4() {
        return getExam1();
    }

    @Override
    public Integer component5() {
        return getExam2();
    }

    @Override
    public Double component6() {
        return getAverage();
    }

    @Override
    public Boolean component7() {
        return getIsdeleted();
    }

    @Override
    public ULong value1() {
        return getId();
    }

    @Override
    public String value2() {
        return getName();
    }

    @Override
    public String value3() {
        return getSection();
    }

    @Override
    public Integer value4() {
        return getExam1();
    }

    @Override
    public Integer value5() {
        return getExam2();
    }

    @Override
    public Double value6() {
        return getAverage();
    }

    @Override
    public Boolean value7() {
        return getIsdeleted();
    }

    @Override
    public StudentRecord value1(ULong value) {
        setId(value);
        return this;
    }

    @Override
    public StudentRecord value2(String value) {
        setName(value);
        return this;
    }

    @Override
    public StudentRecord value3(String value) {
        setSection(value);
        return this;
    }

    @Override
    public StudentRecord value4(Integer value) {
        setExam1(value);
        return this;
    }

    @Override
    public StudentRecord value5(Integer value) {
        setExam2(value);
        return this;
    }

    @Override
    public StudentRecord value6(Double value) {
        setAverage(value);
        return this;
    }

    @Override
    public StudentRecord value7(Boolean value) {
        setIsdeleted(value);
        return this;
    }

    @Override
    public StudentRecord values(ULong value1, String value2, String value3, Integer value4, Integer value5, Double value6, Boolean value7) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        value7(value7);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached StudentRecord
     */
    public StudentRecord() {
        super(Student.STUDENT);
    }

    /**
     * Create a detached, initialised StudentRecord
     */
    public StudentRecord(ULong id, String name, String section, Integer exam1, Integer exam2, Double average, Boolean isdeleted) {
        super(Student.STUDENT);

        setId(id);
        setName(name);
        setSection(section);
        setExam1(exam1);
        setExam2(exam2);
        setAverage(average);
        setIsdeleted(isdeleted);
        resetChangedOnNotNull();
    }
}
